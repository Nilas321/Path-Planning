Certainly, here is the code with comments removed:

```python
import matplotlib.pyplot as plt
from shapely.geometry import Polygon, Point
import random as rn

def generate_random_polygon(num_sides):
    vertices = [(rn.randint(0, 25), rn.randint(0, 25)) for _ in range(num_sides)]
    return Polygon(vertices)

def generate_non_overlapping_polygons(num_polygons):
    polygons = []
    for i in range(num_polygons):
        num_sides = rn.randint(3, 5)
        new_polygon = Polygon([(rn.randint(i * 5, i * 5 + 10), rn.randint(i * 5, i * 5 + 10)) for _ in range(num_sides)])
        
        intersects = any(existing_polygon.intersects(new_polygon) for existing_polygon in polygons)
        
        while intersects:
            new_polygon = Polygon([(rn.randint(i * 5, i * 5 + 10), rn.randint(i * 5, i * 5 + 10)) for _ in range(num_sides)])
            intersects = any(existing_polygon.intersects(new_polygon) for existing_polygon in polygons)
        
        polygons.append(new_polygon)
    
    return polygons

def generate_start_end_points(polygons):
    while True:
        start_point = Point(rn.uniform(0, 30), rn.uniform(0, 30))
        end_point = Point(rn.uniform(0, 30), rn.uniform(0, 30))

        if all(not polygon.contains(point) for polygon in polygons for point in [start_point, end_point]):
            return start_point, end_point

# environment.py

import matplotlib.pyplot as plt
from shapely.geometry import Polygon, Point

def plot_environment(polygons, start_point, end_point, save=False, ax=None):
    if ax is None:
        fig, ax = plt.subplots()

    bounding_box = Polygon([(0, 0), (0, 30), (30, 30), (30, 0)])
    x, y = bounding_box.exterior.xy
    ax.fill(x, y, facecolor='none', edgecolor='black', linestyle='--')

    for polygon in polygons:
        x, y = polygon.exterior.xy
        ax.fill(x, y, facecolor='blue', edgecolor='black', alpha=0.5)

    ax.plot(start_point.x, start_point.y, marker='o', markersize=10, color='green', label='Start Point')
    ax.plot(end_point.x, end_point.y, marker='o', markersize=10, color='red', label='End Point')

    ax.set_xlim(0, 30)
    ax.set_ylim(0, 30)
    ax.set_aspect('equal', adjustable='box')  
    ax.set_xlabel('X-axis')
    ax.set_ylabel('Y-axis')
    ax.legend()

    if save:
        plt.savefig("environment_plot.jpg")

    if ax is None:
        plt.show()
```
