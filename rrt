import random
import numpy as np
from shapely.geometry import Point, LineString

class RRTNode:
    def __init__(self, point, parent=None):
        self.point = point
        self.parent = parent

def generate_random_point():
    return Point(random.uniform(0, 30), random.uniform(0, 30))

def nearest_node(rrt, target_point):
    distances = [point.distance(target_point) for point in rrt]
    return rrt[distances.index(min(distances))], min(distances)

def extend_tree(rrt, target_point, polygons, step_size=1.0):
    current_point = generate_random_point()
    nearest, distance = nearest_node(rrt, current_point)

    direction_vector = np.array([current_point.x - nearest.point.x, current_point.y - nearest.point.y])
    distance = np.linalg.norm(direction_vector)

    if distance > step_size:
        direction_vector = (direction_vector / distance) * step_size

    new_point = Point(nearest.point.x + direction_vector[0], nearest.point.y + direction_vector[1])

    # Check if the line segment from nearest to new_point intersects with any polygon
    line_segment = LineString([nearest.point, new_point])
    intersects_with_polygons = any(polygon.intersects(line_segment) for polygon in polygons)

    # Check if the line segment from nearest to new_point intersects with any other part of the tree
    intersects_with_tree = any(nearest_point.point.distance(new_point) < step_size for nearest_point in rrt)

    if not intersects_with_polygons and not intersects_with_tree:
        new_node = RRTNode(new_point, parent=nearest)
        rrt.append(new_node)

    return rrt


def rrt_connect(start_point, end_point, polygons, max_iter=1000, step_size=1.0):
    start_node = RRTNode(start_point)
    end_node = RRTNode(end_point)
    rrt_start = [start_node]

    for _ in range(max_iter):
        rrt_start = extend_tree(rrt_start, end_point, polygons, step_size)

        # Check if the goal is reached
        nearest, distance = nearest_node(rrt_start, end_point)
        if distance < step_size:
            path = [nearest.point]
            while nearest.parent:
                nearest = nearest.parent
                path.append(nearest.point)
            path.reverse()
            path.append(end_point)
            return path

    return None
